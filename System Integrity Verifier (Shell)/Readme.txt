Introduction:In this assignment you will implement a very simple system integrity verifier (SIV) for a Linux system. The goal of the SIV is to detect file system modifications occurring within a directory tree. The SIV outputs statistics and warnings about changes to a report file specified by the user.The SIV can be run either in initialization mode or in verification mode.Initialization mode:In initialization mode, the SIV program requires the user to enter a path to a monitored directory, another path to a verification file (outside the monitored directory), a third path to a report file and a hash function (e.g., the SIV should support at least MD-5 and SHA-1 message digests). The program will do the following:a) Verify that the specified monitored directory existsb) Verify that the specified verification file and the report file are outside the monitoreddirectoryc) Verify that the specified hash function is supported by your SIVd) If the verification file or report file exists already then the user will be asked if hewants to overwrite the existing file. If answer is “no”, the program terminates.e) Recursively iterate through the directory contents (of arbitrary depth level) and foreach file found record the following information in the verification file (it is up to you decide the format used to store records in the verification file):I. Full path to file, including filename II. Size of the fileIII. Name of user owning the file IV. Name of group owning the fileV. Access rights to the file (either octal or symbolic) VI. Last modification dateVII. Computed message digest with specified hash function over file contents f) Write to the report file (this must be a text file) a summary of your findings:I. Full pathname to monitored directory II. Full pathname to verification fileIII. Number of directories parsed IV. Number of files parsedV. Time to complete the initialization modeVerification mode:In verification mode the user provides the path of the verification file and a path to a report file. The program will do the following:a) Verify that the specified verification file exists.
b) Verify that the specified verification file is outside the monitored directoryc) Verify that the specified report file is outside the monitored directoryd) Recursively iterate through the directory contents (of arbitrary depth level) and verify that it matches exactly the information from the verification file. A warning must be printed to the report file for each entry that diverges from the records in the verification file, along with information about what is differentI. New or removed files/directoriesII. Files with a different size than recordedIII. Files with a different message digest than computed before IV. Files/directories with a different user/groupV. Files/directories with modified access rightVI. Files/directories with a different modification datee) Write to the report file (this must be a text file) a summary of your findings I. Full pathname to monitored directoryII. Full pathname to verification file III. Full pathname to report fileIV. Number of directories parsedV. Number of files parsedVI. Number of warning issuedVII. Time to complete the verification modeUser interfaceThe program must be runnable from the command-line and accept the following command- line arguments:siv <-i|-v> –d <monitored_directory> -v <verification_file> -r <report_file> -h <hash_function>The options -i (indicating initialization mode) and -v (indicating verification mode) are mutually exclusiveThe options -v and -h are mutually exclusive, meaning that you specify the hash function only when you create the verification file (in initialization mode). In verification mode, the hash function must be recovered from the verification file.No other command-line arguments than those describe in this section should be required for executing the SIV in initialization or verification mode.